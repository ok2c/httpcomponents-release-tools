/*
 * ====================================================================
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */


import com.github.ok2.hc.release.HCReleasePlugin
import com.github.ok2.hc.release.Line
import com.github.ok2.hc.release.digest.Digest

apply plugin: HCReleasePlugin
apply plugin: 'signing'

repositories {
    mavenLocal()
    mavenCentral()
}

/////////////////////////// Assembly  ////////////////////////////////////////

ext {
    hcPom = releaseTool.parsePom()
    hcDir = releaseTool.dir
    packageName = releaseTool.getPackageName(hcPom.artifactId)
    distDir = file("${project.buildDir}/dist")
}

configurations {
    hc
}

dependencies {
    hcPom.modules.each { submodule ->
        hc "${submodule.artifact.groupId}:${submodule.artifact.id}:${submodule.artifact.version}"
    }
}

CopySpec docs(File dir, String delim) {
    CopySpec spec = copySpec {
        from (dir) {
            include 'README.txt'
            include 'LICENSE.txt'
            include 'NOTICE.txt'
            include 'RELEASE_NOTES.txt'
            filter(Line.delim(delim), Line.filter())
        }
        from ("${dir}/target/site/apidocs") {
            into 'javadoc'
        }
        from ("${dir}/target/site/tutorial") {
            into 'tutorial'
        }
    }
    hcPom.modules.each { submodule ->
        spec.from ("${dir}/${submodule.name}/target/site/examples") {
            into 'examples'
            filter(Line.delim(delim), Line.filter())
        }
    }
    spec
}

CopySpec libs(Configuration cfg) {
    CopySpec spec = copySpec {
        into 'lib'
    }
    if (!cfg.resolvedConfiguration.hasError()) {
        cfg.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            spec.from(artifact.file.absolutePath) {
                include artifact.file.name
            }
        }
    }
    spec
}

CopySpec sources(File dir) {
    copySpec {
        from (dir) {
            exclude '**/bin/**'
            exclude '**/target/**'
            exclude '**/build/**'
            exclude '**/lib/**'
            exclude '**/.*'
            exclude '**/*.iml'
            exclude '**/log4j2-debug.xml'
        }
    }
}

task distWinBin(type: Zip) {
    with docs(hcDir, Line.CRLF), libs(configurations.hc)
    into "${packageName}-${hcPom.version}"
    classifier = 'bin'
}

task distUxBin(type: Tar) {
    with docs(hcDir, Line.LF), libs(configurations.hc)
    into "${packageName}-${hcPom.version}"
    classifier = 'bin'
}

task distWinSrc(type: Zip) {
    with sources(hcDir)
    into "${packageName}-${hcPom.version}"
    classifier = 'src'
}

task distUxSrc(type: Tar) {
    with sources(hcDir)
    into "${packageName}-${hcPom.version}"
    classifier = 'src'
}

tasks.withType(AbstractArchiveTask) { archive ->
    archive.baseName = packageName
    archive.version = hcPom.version
    archive.destinationDir = distDir
}

tasks.withType(Tar) { tar ->
    tar.extension = "tar.gz"
    tar.compression = Compression.GZIP
}

configurations {
    pkgs
}

artifacts {
    tasks.withType(AbstractArchiveTask) { archive ->
        pkgs archive
    }
}

task sign(type: Sign) {
    sign configurations.pkgs
}

task digest(type: Digest) {
    digest configurations.pkgs
}

task releaseNotes(type: Copy) {
    from "${hcDir}/RELEASE_NOTES.txt"
    into distDir
    rename { "RELEASE_NOTES-${hcPom.major}.${hcPom.minor}.x.txt" }
}

artifacts {
    sign.signatures.each { artifact ->
        archives artifact
    }
    digest.hashes.each { artifact ->
        archives artifact
    }
}

assemble.dependsOn = [sign, digest, releaseNotes]

task showDistArtefacts {
    group = 'Release'
    doLast {
        println "-----"
        println "Distribution ${hcPom.name} ${hcPom.version}"
        println "Repository tag ${hcPom.scm.tag}"
        println "Repository URL ${hcPom.scm.uri}"
        println "-----"
        println "Binary artifacts: "
        def binCfg = configurations.hc
        binCfg.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            println "- ${artifact.file}"
        }
        println "-----"
        println "Dist artifacts: "
        def distCfg = configurations.archives
        distCfg.artifacts.each { artifact ->
            println "- ${artifact.file}"
        }
        println "-----"
    }
}

/////////////////////////// Post-init configuration  ////////////////////////////////////////

def askPassphrase = {
    def password = project.ext.has('signing.password') ? project.ext.'signing.password' : null
    def keyId = project.ext.has('signing.keyId') ? project.ext.'signing.keyId' : null
    if (keyId && !password) {
        def console = System.console()
        if (console) {
            console.println "\n> Please provide password for PGP key ${keyId}: "
            char[] raw = console.readPassword()
            project.ext.'signing.password' = new String(raw)
        }
    }
}

gradle.taskGraph.whenReady { TaskExecutionGraph taskGraph ->
    taskGraph.allTasks.findAll { task -> task instanceof Sign }.each { task ->
        task.doFirst { askPassphrase() }
    }
}
